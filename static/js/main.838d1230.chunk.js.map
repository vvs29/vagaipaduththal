{"version":3,"sources":["MemberInfo.js","logo.svg","CreateMember.js","Suggestions.js","Classifier.js","App.js","serviceWorker.js","index.js"],"names":["methods","memberInfo","mid","fullname","nickname","email","contributionAmount","module","exports","CreateMember","props","e","preventDefault","Form","onSubmit","this","handleSubmit","Row","Group","as","Col","controlId","Label","Control","required","type","xs","lg","Button","variant","React","Component","MemberInfo","require","SuggestedMember","handleRadioSelect","callback","labelText","getMemberInfoAsString","style","border","padding","borderRadius","marginBottom","Check","name","id","label","onChange","Suggestions","handleSelect","memberList","target","selectedIndex","bind","memberInfoJSON","inputString","suggestionInfos","suggestionsJSON","suggestedMemberInfos","map","memID","i","push","memberID","getMemberInfo","memberListArray","hasOwnProperty","suggestedMembers","getSuggestions","member","key","InputString","Card","bg","display","Body","Title","value","Classifier","handleSave","temp","state","selectedmid","activePage","setState","handlePageChange","inputStrings","input","activeInput","marginTop","Container","md","undefined","Pagination","Item","onClick","AppHeader","Navbar","expand","Brand","href","src","logo","alt","width","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","AppBody","getInputStrings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.838d1230.chunk.js","sourcesContent":["var methods = {};\n\nmethods.getMemberInfoAsString = function (memberInfo) {\n    return \"ID:\" + memberInfo.mid + \" | \" + memberInfo.fullname + \" | \" + memberInfo.nickname + \" | \"\n        + memberInfo.email + \" | Contribution Amount:\" + memberInfo.contributionAmount\n};\n\nmodule.exports = methods;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Col from \"react-bootstrap/Col\";\n\nclass CreateMember extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n    };\n\n    render() {\n        // add to memberInfo.json file\n        return (\n            <div>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"mid\">\n                            <Form.Label>Member ID</Form.Label>\n                            <Form.Control required type=\"id\" />\n                        </Form.Group>\n                        <Form.Group  as={Col} controlId=\"joiningDate\">\n                            <Form.Label>Joining Date</Form.Label>\n                            <Form.Control required type=\"date\" />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} xs={12} lg={6} controlId=\"fullname\">\n                            <Form.Label>Full Name</Form.Label>\n                            <Form.Control required type=\"name\" />\n                        </Form.Group>\n                        <Form.Group as={Col} xs={12} lg={6} controlId=\"nickname\">\n                            <Form.Label>Nickname</Form.Label>\n                            <Form.Control type=\"name\" />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} xs={12} lg={6} controlId=\"email\">\n                            <Form.Label>e-mail ID</Form.Label>\n                            <Form.Control required type=\"email\" />\n                        </Form.Group>\n                        <Form.Group as={Col} xs={12} lg={6} controlId=\"phone\">\n                            <Form.Label>Mobile</Form.Label>\n                            <Form.Control type=\"phone\" />\n                        </Form.Group>\n                    </Form.Row>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Create\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default CreateMember;","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport memberInfoJSON from './res/memberInfo.json';\nimport suggestionsJSON from './res/mappings.json';\n\nvar MemberInfo = require(\"./MemberInfo\");\n\nclass SuggestedMember extends React.Component {\n    handleRadioSelect = e => {\n        this.props.callback(this.props.memberInfo);\n    }\n\n    render() {\n        var memberInfo = this.props.memberInfo;\n        var labelText = MemberInfo.getMemberInfoAsString(memberInfo);\n        return (\n            // TODO: [UI] Show a button instead of this with hover animation and all\n            <div style={{border: 1 + \"px solid\", padding: 0.5 + \"em\", borderRadius: 1 + \"em\", marginBottom: 1 + \"em\"}}>\n                <Form.Check type=\"radio\" name=\"memberSelection1\" id={\"selectionid-\" + memberInfo.mid} label={labelText}\n                            onChange={this.handleRadioSelect}/>\n            </div>\n        );\n    }\n}\n\nclass Suggestions extends React.Component {\n    getMemberInfo() {\n        return memberInfoJSON;\n    }\n\n    getSuggestions(inputString, memberInfo) {\n        var suggestionInfos = suggestionsJSON[inputString];\n        var suggestedMemberInfos = [];\n        suggestionInfos.map((memID, i) => {\n            suggestedMemberInfos.push(memberInfo[memID])\n        });\n        return suggestedMemberInfos;\n    }\n\n    // need to define as an arrow function otherwise the this object isn't available inside.\n    // see SuggestedMember's handleRadioSelect. this binds the method with the class.\n    // we may also call .bind(this) like below\n    handleSelect = function (e) {\n        this.props.callback(this.memberList[e.target.selectedIndex + 1]);\n    }.bind(this);\n\n    render() {\n        // TODO: [UI nicety] if selected from dropdown add this to the list of radio buttons and select it\n        // TODO: sort items in dropdown alphabetically\n        // TODO: typing should search all fields (name, nickname, id, email)\n        this.memberList = this.getMemberInfo();\n\n        // converting to array so I can use the map function\n        this.memberListArray = [];\n        for (var memberID in this.memberList) {\n            if (this.memberList.hasOwnProperty(memberID)) {\n                var memberInfo = this.memberList[memberID];\n                this.memberListArray.push(memberInfo);\n            }\n        }\n\n        var suggestedMembers = this.getSuggestions(this.props.inputString, this.memberList);\n        return (\n            <div>\n                {suggestedMembers.map((member, i) => <SuggestedMember key={i} memberInfo={member}\n                                                                      callback={this.props.callback}/>)}\n                <Form.Control as=\"select\" onChange={this.handleSelect}>\n                    {this.memberListArray.map((memberInfo, i) => <option>{MemberInfo.getMemberInfoAsString(memberInfo)}</option>)}\n                </Form.Control>\n            </div>\n        );\n    }\n}\n\nexport default Suggestions;","import React from 'react';\nimport Pagination from 'react-bootstrap/Pagination'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport CreateMember from './CreateMember'\nimport Suggestions from './Suggestions'\n\nclass InputString extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card bg=\"light\" style={{display:\"inline-block\"}}>\n                <Card.Body>\n                    <Card.Title>{this.props.value}</Card.Title>\n                </Card.Body>\n            </Card>\n            //<Button variant=\"outline-secondary\">{this.props.value}</Button>\n        );\n    }\n}\n\nclass Classifier extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {activePage: 1, selectedmid: []}\n    }\n\n    getRows() {\n        var templateRow = this.props.inputStrings.map((input, i) => <div><InputString value={input}/></div>);\n        return templateRow;\n\n    }\n\n    handleSave = e => {\n        let temp = [...this.state.selectedmid];\n        temp[this.state.activePage] = e;\n        this.setState({selectedmid: temp});\n    }\n\n    handlePageChange = e => {\n        this.setState({activePage: e.target.id});\n    }\n\n    render() {\n        // overview of selections\n        // write selections to file (transaction description to memberid map)\n        this.activeInput = this.props.inputStrings[this.state.activePage];\n        var MemberInfo = require(\"./MemberInfo\");\n        return (\n            <div>\n                <div style={{marginTop: 1 + \"em\"}}/>\n                <InputString value={this.activeInput}/>\n                <div style={{marginTop: 2 + \"em\"}}/>\n                <Container>\n                    <Row>\n                        <Col xs={12} md={6}><Suggestions inputString={this.activeInput}\n                                                         callback={this.handleSave}/></Col>\n                        <Col xs={12} md={6}><CreateMember/></Col>\n                    </Row>\n                    {(this.state.selectedmid[this.state.activePage] !== undefined) ?\n                        <Row style={{marginTop: 1 + \"em\"}}>\n                            <Col xs={12}>\n                                Selected: {MemberInfo.getMemberInfoAsString(this.state.selectedmid[this.state.activePage])}\n                            </Col>\n                        </Row>\n                        : \"\"\n                    }\n                    <Row>\n                        <Col xs={12}>\n                        </Col>\n                    </Row>\n                </Container>\n                <div style={{display: \"inline-block\", marginTop:1 + \"em\"}}>\n                    <Pagination>\n                        {this.props.inputStrings.map((input, i) =>\n                            <Pagination.Item id={i} onClick={this.handlePageChange}>{i + 1}</Pagination.Item>)}\n                    </Pagination>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Classifier;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Classifier from './Classifier';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AppHeader />\n        <AppBody />\n    </div>\n  );\n}\n\nfunction getTimestamp() {\n    var today = new Date();\n    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    return date;\n}\n\nclass AppHeader extends React.Component {\n  render() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">\n                <img src={logo} alt=\"\" style={{width:'5em'}} />\n                Vagaipaduththal\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\" >\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"https://www.imaigal.org/\">Imaigal</Nav.Link>\n                </Nav>\n                <Nav>\n                    <NavDropdown title=\"Guest\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#\">Sign In</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n  }\n}\n\nclass AppBody extends React.Component {\n    getInputStrings() {\n        var inputStrings = [\"BIL/001462403187/Imaigal_Kavimuthu/NSP\", \"BIL/001462423482/VenkatAmaz-Imgl/NSP\",\n            \"INF/020557394501/RSUP005 Rice Annai Il\", \"NEFT-SBIN518152086947-Miss  ANEETHA  M-/ATTN//INB\",\n        \"UPI/815219810812/June/kmadhuraganesh@/HDFC BANK L\"];\n        return inputStrings\n    }\n\n    render() {\n\n        return (\n           <Classifier inputStrings={this.getInputStrings()}/>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}